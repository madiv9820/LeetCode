import unittest
from timeout_decorator import timeout
from Solution import Solution

class UnitTest(unittest.TestCase):
    def setUp(self) -> None:
        self.obj = Solution()
        self.testCases = {
            1: {
                'chalk': [5,1,5],
                'k': 22,
                'output': 0
            },
            2: {
                'chalk': [3,4,1,2],
                'k': 25,
                'output': 1
            },
            3: {
                'chalk': [49,66,92,37,73,29,95,89,74,2,11,61,90,78,81,5,56,61,10,
                          7,44,9,97,72,40,11,83,28,89,36,31,66,10,65,25,65,1,18,40,
                          88,3,38,79,98,8,79,58,65,31,24,3,14,82,64,85,40,93,5,94,34,72,
                          44,37,100,75,22,6,61,81,70,39,80,80,28,10,35,71,82,7,89,74,3,
                          93,70,99,90,25,13,93,43,71,21,67,72,55,27,79,85,35,4,2,26,51,54,
                          11,67,13,33],
                'k': 428205100,
                'output': 49
            },
            4: {
                'chalk': [73,79,31,60,84,46,91,27,27,58,16,1,3,43,54,92,84,76,39,27,87,68,5,
                          42,10,90,78,24,95,83,52,73,70,82,22,63,22,23,68,98,4,56,68,50,22,
                          10,9,87,64,37,28,18,14,75,32,53,19,78,83,72,26,94,14,80,66,81,50,
                          18,97,9,21,51,40,12,25,62,47,20,60,43,73,82,91,87,44,29,10,15,99,
                          51,35,54,78,30,69,68,13,32,7,39,87,66,90,60,3,67,68,82,37],
                'k': 375647757,
                'output': 102
            },
            5: {
                'chalk': [1],
                'k': 1000000000,
                'output': 0
            },
            6: {
                'chalk': [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                          1,1,1,1,1,1,1,1],
                'k': 999999999,
                'output': 999
            }
        }
        return super().setUp()
    
    @timeout(1)
    def test_Case_Normal_1(self):
        test = self.testCases[1]
        try:
            res = self.obj.chalkReplacer(test['chalk'], test['k'])
            self.assertIsInstance(res, int)
            self.assertEqual(res, test['output'])
        except Exception as e:
            raise(e)
    
    @timeout(1)
    def test_Case_Normal_2(self):
        test = self.testCases[2]
        try:
            res = self.obj.chalkReplacer(test['chalk'], test['k'])
            self.assertIsInstance(res, int)
            self.assertEqual(res, test['output'])
        except Exception as e:
            raise(e)
    
    @timeout(2)
    def test_Case_Long_1(self):
        test = self.testCases[3]
        try:
            res = self.obj.chalkReplacer(test['chalk'], test['k'])
            self.assertIsInstance(res, int)
            self.assertEqual(res, test['output'])
        except Exception as e:
            raise(e)
        
    @timeout(2)
    def test_Case_Long_2(self):
        test = self.testCases[4]
        try:
            res = self.obj.chalkReplacer(test['chalk'], test['k'])
            self.assertIsInstance(res, int)
            self.assertEqual(res, test['output'])
        except Exception as e:
            raise(e)
    
    @timeout(1)
    def test_Case_When_Length_Is_1_n_K_Is_Large(self):
        test = self.testCases[5]
        try:
            res = self.obj.chalkReplacer(test['chalk'], test['k'])
            self.assertIsInstance(res, int)
            self.assertEqual(res, test['output'])
        except Exception as e:
            raise(e)
    
    @timeout(2)
    def test_Case_When_Both_Length_n_K_Are_Large(self):
        test = self.testCases[6]
        try:
            res = self.obj.chalkReplacer(test['chalk'], test['k'])
            self.assertIsInstance(res, int)
            self.assertEqual(res, test['output'])
        except Exception as e:
            raise(e)
    
if __name__ == '__main__':
    unittest.main()